#!/usr/bin/env bash
set -eo pipefail; [[ -n "$PLUSHU_TRACE" ]] && set -x

get_cert_regex () {
  local certdomains

  # If we can read the certificate
  if command -v openssl >/dev/null 2>&1 && [[ -r "$1" ]]; then

    # Read the domain from the certificate
    certdomains=$(openssl x509 -in "$1" -noout -subject |
      tr '/' '\n' | grep CN= | cut -c4-)

    # Read any alternative names from the certificate
    certdomains+=$(openssl x509 -in "$1" -noout -text |
      sed -nr '/^ {12}X509v3 Subject Alternative Name/{n
        s/(^|,) *DNS:/,/g; s/(^|,) [^,]*//g;p}')

  # If we can't read the certificate
  else
    # Just assume the filename is the domain name(s)
    basename=${1##*/}
    certdomains="${basename%.crt}"
    certdomains="${certdomains/ANY/*}"
  fi

  # Convert comma-separated list of domains to regular expression
  sed 's/\./\./g;s/\*/[^.]*/g;s/,/|/g' <<<"$certdomains"
}

app=$1
app_dir=$PLUSHU_APPS_DIR/$app
app_conf_dir=$PLUSHU_ROOT/nginx/http/apps/$app
app_conf=$app_conf_dir/25_servers.conf

certificates=()
certregexes=()

# For instances where a glob has no matches we want an empty list
shopt -s nullglob

for cert in "$PLUSHU_ROOT"/ssl/*.crt "$PLUSHU_ROOT"/ssl/$app/*.crt; do
  if [[ -e "${cert%.crt}.key" ]]; then
    # get just the certificate name
    cert==${cert#$PLUSHU_ROOT/ssl/}
    # describe the certificate location relative to the app config
    certificates+=("ssl/${cert%.crt}")
    certregexes+=(`get_cert_regex "$cert"`)
  fi
done

certlength=${#certificates[@]}
ssldomains=()
nossldomains=()
domain_count=0

for domain in `"$PLUSHU_ROOT/lib/plushook" app-domains "$app"`; do
  domain_count=$((domain_count+1))
  for (( i=0; i < $certlength; i++ )); do
    if [[ "$domain" =~ ${certregexes[$i]} ]]; then
      ssldomains[$i]+=" $domain"
      break
    fi
  done
  # If the loop iterates through all certs and finds no matches
  if [[ "$i" == "$certlength" ]]; then
    nossldomains+=("$domain")
  fi
done

if [[ domain_count != 0 ]]; then
  mkdir -p "$app_conf_dir"

  # empty the conf file so the new servers can be appended
  > "$app_conf"

  hookdirectives=$("$PLUSHU_ROOT/lib/plushook" app-nginx-directives "$app")

  for (( i=0; i < $certlength; i++ )); do
    if [[ -n "${ssldomains[i]}" ]]; then
      cat <<EOF >>"$app_conf"

server {
  listen      [::]:80;
  listen      80;
  server_name${ssldomains[i]};
  return 301 https://\$host\$request_uri;
}

server {
  listen      [::]:443 ssl spdy;
  listen      443 ssl spdy;
  server_name${ssldomains[i]};
  ssl_certificate     ${certificates[i]}.crt;
  ssl_certificate_key ${certificates[i]}.key;

  keepalive_timeout   70;
  add_header          Alternate-Protocol  443:npn-spdy/2;

  location    / {
    proxy_pass  http://$app;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
EOF
    if [[ -n "$hookdirectives" ]]; then
      printf '%s\n' "$hookdirectives" >>"$app_conf"
    fi
    printf '}\n' >>"$app_conf"
    fi
  done

  if [[ -n "${nossldomains[*]}" ]]; then
    cat <<EOF >>"$app_conf"

server {
  listen      [::]:80;
  listen      80;
  server_name ${nossldomains[*]};
  location    / {
    proxy_pass  http://$app;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
EOF
    if [[ -n "$hookdirectives" ]]; then
      printf '%s\n' "$hookdirectives" >>"$app_conf"
    fi
    printf '}\n' >>"$app_conf"
  fi

  "$PLUSHU_ROOT/lib/plushook" reload-nginx
fi
